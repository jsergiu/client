{{page-title "Clock"}}

<div class="clock-container">
  <div class="clock">
    <div class="time-wrapper">
      <span class="time">{{this.currentTime}}</span>
      <span class="period">{{this.period}}</span>
    </div>
  </div>
</div>

<style>
  .clock-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background: linear-gradient(135deg, 
      rgba(45, 45, 45, 0.95) 0%,
      rgba(35, 35, 35, 0.95) 50%,
      rgba(25, 25, 25, 0.95) 100%
    );
  }

  .clock {
    text-align: center;
    color: #fff;
    font-family: -apple-system, BlinkMacSystemFont, "SF Pro Display", "Helvetica Neue", sans-serif;
  }

  .time-wrapper {
    display: flex;
    align-items: baseline;
    gap: 1rem;
    height: 40vh;
  }

  .time {
    font-size: 40vh;
    font-weight: 200;
    letter-spacing: -0.02em;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    line-height: 1;
  }

  .period {
    font-size: 12vh;
    font-weight: 200;
    opacity: 0.8;
    margin-bottom: 1rem;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    line-height: 1;
  }
</style>

<script>
  class ClockController {
    constructor() {
      this.currentTime = '';
      this.period = '';
      this.updateTime();
      this.startTimer();
    }

    updateTime() {
      const now = new Date();
      const hours = now.getHours();
      const minutes = now.getMinutes();
      
      // Format hours to 12-hour format
      const formattedHours = hours % 12 || 12;
      const formattedMinutes = minutes.toString().padStart(2, '0');
      
      this.currentTime = `${formattedHours}:${formattedMinutes}`;
      this.period = hours >= 12 ? 'pm' : 'am';
    }

    startTimer() {
      setInterval(() => {
        this.updateTime();
      }, 1000);
    }
  }

  // Initialize the clock when the template is rendered
  document.addEventListener('DOMContentLoaded', () => {
    new ClockController();
  });
</script>